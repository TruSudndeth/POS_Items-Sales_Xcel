Public ReceiptPrinted As Boolean
Public ReceiptUpdated As Boolean

Option Explicit

Sub AddItem()
Dim ItemRow As Long, AvailRow As Long
With Sheet1
    If .Range("B5").Value = Empty Then Exit Sub
    On Error Resume Next
    .Shapes("ItemPic").Delete
    On Error GoTo 0
ItemRow = .Range("B5").Value 'Item Row
AvailRow = .Range("K999").End(xlUp).Row + 1 'First Avail Row
.Range("B6").Value = AvailRow 'Set Receipt Row
.Range("E3").Value = Sheet2.Range("B" & ItemRow).Value 'Item Name
.Range("F6").Value = Sheet2.Range("D" & ItemRow).Value 'Item Price
.Range("F8").Value = 1 'Default Item Qty to 1

'Add Item Detail to receipt
.Range("K" & AvailRow).Value = .Range("E3").Value  'Item Name
.Range("L" & AvailRow).Value = .Range("F8").Value 'Item Qty
.Range("M" & AvailRow).Value = .Range("F6").Value 'Item Price
.Range("N" & AvailRow).Value = "=L" & AvailRow & "*M" & AvailRow 'Total Price Formula

On Error Resume Next
If Dir(Sheet2.Range("E" & ItemRow).Value, vbDirectory) <> "" Then
     With .Pictures.Insert(Sheet2.Range("E" & ItemRow).Value)
        With .ShapeRange
            .LockAspectRatio = msoTrue
            .Height = 45
            .Name = "ItemPic"
        End With
     End With
     With .Shapes("ItemPic")
        .Left = Sheet1.Range("D6").Left
        .Top = Sheet1.Range("D6").Top
        .Visible = msoCTrue
     End With
End If
On Error GoTo 0
.Range("E10:F10").ClearContents 'Clear Item Item
.Range("E10").Select
End With
End Sub

Sub RemoveItem()
    Dim ws As Worksheet
    Dim SelectedItemRow As Long, LastItemRow As Long
    Dim i As Long
    
    Set ws = Sheet1 ' Change "Sheet1" to your actual sheet name
    
    ' Determine the row of the selected item
    SelectedItemRow = ws.Range("B6").Value
    
    ' Exit if no item is selected
    If SelectedItemRow = Empty Then
        MsgBox "No item selected.", vbExclamation
        Exit Sub
    End If
    
    ' Find the last item row
    LastItemRow = ws.Range("K999").End(xlUp).Row
    
    ' Delete the row of the selected item
    ws.Rows(SelectedItemRow).Delete
    
    ' Shift the remaining items up by adjusting their row numbers
    For i = SelectedItemRow + 1 To LastItemRow
        ws.Cells(i - 1, "B").Value = i - 1 ' Update receipt row number
        ws.Rows(i).Copy Destination:=ws.Rows(i - 1) ' Shift the row up
    Next i
    
    ' Clear the row where the last item was removed
    ws.Cells(LastItemRow, "B").Value = Empty
    ws.Range("K" & LastItemRow & ":N" & LastItemRow).ClearContents
    
    MsgBox "Item removed successfully.", vbInformation
End Sub


Private Function IsCellLocked(cell As Range) As Boolean
    ' Return if cell IsLocked
    IsCellLocked = cell.Locked
    If IsCellLocked Then
        Sheet1.Range("E10").Select
    End If
End Function

Sub EnterNumberBtn()
Dim targetCell As Range
Set targetCell = ActiveCell
With Sheet1
    If Not IsCellLocked(targetCell) Then
        ActiveCell.Value = ActiveCell.Value & Right(Application.Caller, 1)
    End If
End With
End Sub

Sub ClearItemBtn()
Dim targetCell As Range
Set targetCell = ActiveCell
With Sheet1
    If Not IsCellLocked(targetCell) Then
        If ActiveCell.Address = "$E$10" Then
                .Range("E10:F10").ClearContents
        Else:
            ActiveCell.ClearContents
        End If
    End If
End With
End Sub

Sub EnterDecimalBtn()
    Dim targetCell As Range
    Set targetCell = ActiveCell
    
    If Not IsCellLocked(targetCell) Then
        ActiveCell.Value = ActiveCell.Value & "."
    End If
End Sub

Sub EnterPayemntCell()
Sheet1.Range("I7").Select
End Sub

Sub EnterPayType()
Sheet1.Range("I6").Value = Application.Caller
Sheet1.Range("I7").Select 'Enter Payement Cell
End Sub

Sub UpdateReceipt()
    ' Check if the receipt has already been updated
    If ReceiptUpdated Then
        Exit Sub
    End If
    
    Dim LastItemRow As Long
    Dim isSheetProtected As Boolean
    Dim ws As Worksheet
    Dim shape As shape
    
    Set ws = ThisWorkbook.Sheets("POS") ' Use the actual sheet name

    With ws
        ' Check if the sheet is protected
        isSheetProtected = .ProtectContents
        If isSheetProtected Then .Unprotect "yourpassword" ' Replace with your actual password
        
        ' Check if the value in I7 is less than the value in I5
        If Not IsPaymentSufficient() Then
            If isSheetProtected Then .Protect "yourpassword" ' Re-protect the sheet if it was originally protected
            Exit Sub ' Exit the Subroutine if payment is not sufficient
        End If

        .Range("S6").Value = .Range("I7").Value 'Enter Payment Amount
        LastItemRow = .Range("K9999").End(xlUp).Row  'Last Item Row
        If LastItemRow < 10 Then
            If isSheetProtected Then .Protect "yourpassword" ' Re-protect the sheet if it was originally protected
            Exit Sub
        End If
        .Range("B6").ClearContents 'Clear Select Receipt Row
        .Range("FooterRng").Copy
        .Range("M" & LastItemRow + 1).PasteSpecial xlPasteValues 'Paste value only
        Application.CutCopyMode = False
        
        ' Check if the shape "FooterGrp" exists and set its position
        On Error Resume Next
        Set shape = .Shapes("FooterGrp")
        On Error GoTo 0
        If Not shape Is Nothing Then
            shape.Left = .Range("K" & LastItemRow + 7).Left
            shape.Top = .Range("K" & LastItemRow + 7).Top
            shape.Visible = msoCTrue
        Else
            MsgBox "Shape 'FooterGrp' not found."
        End If
        
        .PageSetup.PrintArea = "K1:N" & LastItemRow + 11
        .Range("E10").Select
        
        ' Re-protect the sheet if it was originally protected
        If isSheetProtected Then .Protect "yourpassword" ' Replace with your actual password
    End With
    
    ReceiptUpdated = True
    ChangeCellColor
End Sub




Function IsPaymentSufficient() As Boolean
    With Sheet1
        ' Check if the value in I7 is less than the value in I5
        If CDbl(.Range("I7").Value) < CDbl(.Range("I5").Value) Then
            MsgBox "Please enter a payment at or above the total"
            .Range("I7").Select
            IsPaymentSufficient = False ' Payment is not sufficient
        Else
            IsPaymentSufficient = True ' Payment is sufficient
        End If
    End With
End Function

Sub PrintReceipt()
    On Error GoTo ErrorHandler ' Set up error handling
    
    If Not IsPaymentSufficient Then
        Exit Sub
    End If
    
    If Not ReceiptUpdated Then
        UpdateReceipt ' Call UpdateReceipt if it hasn't been called
    End If
    
    With Sheet1
        ' Attempt to print
        .PrintOut , , , , True, , , , False
    End With
    
    ReceiptPrinted = True ' Set the flag to indicate the receipt was printed
    
    Exit Sub ' Exit the subroutine normally

ErrorHandler:
    If Err.Number = 1004 Then
        MsgBox "Print operation was canceled.", vbExclamation, "Print Canceled"
        Err.Clear ' Clear the error
    Else
        MsgBox "An unexpected error occurred: " & Err.Description, vbCritical, "Error"
    End If
End Sub

Sub SaveAndClear()
    Dim LastItemRow As Long, FirstDBRow As Long, TotalRows As Long
    Dim userResponse As VbMsgBoxResult
    
    If Not ReceiptPrinted Then
        userResponse = MsgBox("You didn't print the receipt. Do you wish to continue?", vbYesNo + vbExclamation, "Warning")
        If userResponse = vbNo Then
            Exit Sub
        End If
    End If
    
    With Sheet1
        LastItemRow = .Range("K9999").End(xlUp).Row  'Last Item Row
        TotalRows = LastItemRow - 9 'Total Items
        FirstDBRow = Sheet3.Range("A99999").End(xlUp).Row + 1  'First Avail Row
        Sheet3.Range("A" & FirstDBRow & ":A" & FirstDBRow + TotalRows - 1).Value = .Range("M5").Value 'Receipt #
        Sheet3.Range("B" & FirstDBRow & ":B" & FirstDBRow + TotalRows - 1).Value = .Range("M6").Value 'Order Date
        Sheet3.Range("C" & FirstDBRow & ":C" & FirstDBRow + TotalRows - 1).Value = .Range("M7").Value 'Cashier
        Sheet3.Range("D" & FirstDBRow & ":G" & FirstDBRow + TotalRows - 1).Value = .Range("K10:N" & LastItemRow).Value 'All Item Detail
        .Shapes("FooterGrp").Visible = msoFalse 'Hide Footer Group Shape
        On Error Resume Next
        .Shapes("ItemPic").Delete
        On Error GoTo 0
        .Range("K10:N9999").ClearContents
        .Calculate
        .Range("M5").Value = .Range("B7").Value 'Next Receipt #
        .Range("B6,E3:F3,F6,F8,I7").ClearContents 'Clear Item fields
        .Range("E10").Select
    End With
    ReceiptUpdated = False ' Reset the flag for Updated Receipt for next transaction
    ReceiptPrinted = False ' Reset the flag for the next transaction
    ChangeCellColor
End Sub

Public Sub ChangeCellColor()
    Dim LastItemRow As Long
    Dim cell As Range
    Dim ws As Worksheet
    Dim isSheetProtected As Boolean

    ' Ensure ReceiptUpdated is declared at the module level
    ' Public ReceiptUpdated As Boolean

    Set ws = ThisWorkbook.Sheets("POS") ' Use the actual sheet name

    With ws
        ' Check if the sheet is protected
        isSheetProtected = .ProtectContents
        If isSheetProtected Then .Unprotect "yourpassword" ' Replace "yourpassword" with your actual password

        ' Find the last item row
        LastItemRow = .Range("K9999").End(xlUp).Row + 1

        ' Loop through each cell in the range
        For Each cell In .Range("K10:N" & LastItemRow - 1)
            ' Temporarily unlock the cell if the sheet is protected
            If isSheetProtected Then cell.Locked = False

            ' Check if ReceiptUpdated is false
            If Not ReceiptUpdated Then
                ' Change the cell color to red
                cell.Interior.Color = RGB(255, 0, 0) ' Red color
            Else
                ' Use the default color (white or transparent)
                cell.Interior.ColorIndex = xlColorIndexNone
            End If

            ' Lock the cell again if it was temporarily unlocked
            If isSheetProtected Then cell.Locked = True
        Next cell

        ' Re-protect the sheet if it was originally protected
        If isSheetProtected Then .Protect "yourpassword" ' Replace "yourpassword" with your actual password
    End With
End Sub


Public Sub LockAllCells()
    Dim ws As Worksheet
    Set ws = Sheet1 ' Change to your actual sheet name
    
    ' Unlock all cells
    ws.Cells.Locked = False
    
    ' Protect the worksheet
    ws.Protect Password:="yourpassword", UserInterfaceOnly:=True
    
    ' Lock all cells except the ones under ProtectFormulas
    Dim cell As Range
    Dim protectRange As Range
    Set protectRange = ws.Range("F6,F8,E10:F10,I7") ' Range to remain unlocked
    
    For Each cell In ws.UsedRange
        If Intersect(cell, protectRange) Is Nothing Then
            cell.Locked = True
        End If
    Next cell
End Sub

Public Sub ProtectFormulas()
    Dim ws As Worksheet
    Set ws = Sheet1 ' Change to your actual sheet name
    
    With ws
        ' Unlock cells that can be edited
        .Range("F6,F8,E10:F10,I7").Locked = False

        ' Protect worksheet
        .Protect Password:="yourpassword", UserInterfaceOnly:=True
    End With
End Sub


Sub UnlockCells()
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("POS") ' Change "Sheet1" to your sheet name

    ' Check if the sheet is protected
    Dim isSheetProtected As Boolean
    isSheetProtected = ws.ProtectContents
    
    ' Unprotect the sheet (if it's protected)
    If isSheetProtected Then
        ws.Unprotect Password:="yourpassword" ' Change "yourpassword" to your password
    End If

    ' Unlock all cells
    ws.Cells.Locked = False

    ' Or unlock specific cells only
    ' ws.Range("A1:B10").Locked = False ' Example for specific range

    ' Reprotect the sheet (if it was originally protected)
    If isSheetProtected Then
        ws.Protect Password:="yourpassword" ' Change "yourpassword" to your password
    End If

    MsgBox "Cells have been unlocked!", vbInformation
End Sub


