Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
        ' Check if the changed cell is J4
    If Not Intersect(Target, Me.Range("J4")) Is Nothing Then
        Dim taxRate As Double
        Dim cellValue As String
        
        ' Disable event handling temporarily
        Application.EnableEvents = False
        
        ' Remove any leading/trailing spaces
        cellValue = Trim(Target.Value)
        
        ' Check if the cell value is a valid number and within the range
        If IsNumeric(cellValue) Then
            taxRate = CDbl(cellValue)
            If taxRate >= 0 And taxRate <= 100 Then
                ' Format the cell with @ taxRate%
                Target.Value = "@ " & Format(taxRate, "0.00") & "%"
            Else
                ' Invalid tax rate, reset to default 7.98%
                MsgBox "Please enter a valid tax rate between 0.00 and 100.00."
                Target.Value = "@ 7.98%"
            End If
        Else
            ' Non-numeric value, reset to default 7.98%
            MsgBox "Please enter a valid tax rate."
            Target.Value = "@ 7.98%"
        End If
        
        ' Re-enable event handling
        Application.EnableEvents = True
    End If
    
    Dim taxRateCell As Range
    Set taxRateCell = Me.Range("J4")
    
    ' Check if the changed cell is J4
    If Not Intersect(Target, taxRateCell) Is Nothing Then
        ' Extract the tax rate from cell J4
        taxRate = CDbl(Replace(Replace(taxRateCell.Value, "@", ""), "%", ""))
        
        ' Update the formula in cell I4 with the new tax rate
        Me.Range("I4").Formula = "=ROUND(I3 * " & taxRate / 100 & ", 2)"
    End If
    
    'On change of item, if Row found and add to receipt
    If Not Intersect(Target, Range("E10")) Is Nothing And Range("E10").Value <> Empty Then
        AddItem
        ResetReceiptVariables
    End If
    
    'On Change of Price Or Qty For Added Items
    If Not Intersect(Target, Range("F8,F6")) Is Nothing And Range("B4").Value = False And Range("B6").Value <> Empty Then
        Dim RecptRow As Long
        RecptRow = Range("B6").Value 'Receipt Row
        If Not Intersect(Target, Range("F6")) Is Nothing Then
            Range("M" & RecptRow).Value = Target.Value 'Update Price
            ResetReceiptVariables
        End If
        
        If Not Intersect(Target, Range("F8")) Is Nothing Then
            Range("L" & RecptRow).Value = Target.Value 'Update Qty
            ResetReceiptVariables
        End If
    End If
    If Not Intersect(Target, Range("I7")) Is Nothing Then
        ResetReceiptVariables
        ColorCalculate
        Reset
    End If
End Sub

Private Sub Workbook_Open()
    Sheet1.Protect Password:="yourpassword", UserInterfaceOnly:=True
    Sheet1.ProtectFormulas
End Sub

Function ResetReceiptVariables()
    ReceiptUpdated = False
    ReceiptPrinted = False
    POSMacros.ChangeCellColor
End Function

Private Sub ColorCalculate()
    Dim cell As Range
    
    Set cell = Range("I8")
    
    ' Temporarily unlock the cell
    cell.Locked = False
    
    ' Check if the cell contains an error value
    If IsError(cell.Value) Then
        ' MsgBox "Cell I8 contains an error."
        cell.Interior.ColorIndex = xlColorIndexNone ' Clear color for error value
    ElseIf IsNumeric(cell.Value) Then
        ' Check if the value in I8 is negative or positive
        If cell.Value < 0 Then
            ' MsgBox "Cell I8 value is negative."
            cell.Interior.Color = RGB(255, 0, 0) ' Red color for negative value
        Else
            ' MsgBox "Cell I8 value is positive."
            cell.Interior.Color = RGB(0, 255, 0) ' Green color for positive value
        End If
    Else
        ' Handle the case where the cell value is not numeric
        ' MsgBox "Cell I8 value is not numeric."
        cell.Interior.ColorIndex = xlColorIndexNone ' Clear color (or you can choose any other default color)
    End If
    
    ' Lock the cell again
    cell.Locked = True
End Sub



Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    'On Selection of Receipt Item, load Item details
    
    If Not Intersect(Target, Range("K10:N9999")) Is Nothing And Range("K" & Target.Row).Value <> Empty Then
        Dim ItemRow As Long
        Dim ItemRange As Range, FoundItem As Range
        Set ItemRange = Sheet2.Range("Item_Name")
        On Error Resume Next
        Shapes("ItemPic").Delete
        On Error Resume Next
            Range("B6").Value = Target.Row 'Selected Row
            Range("B4").Value = True
            Range("E3").Value = Range("K" & Target.Row).Value 'Item Name
            Range("F8").Value = Range("L" & Target.Row).Value 'Item Qty
            Range("F6").Value = Range("M" & Target.Row).Value 'Item Price
            
            Set FoundItem = ItemRange.Find(Range("K" & Target.Row).Value, , xlValues, xlWhole)
            If Not FoundItem Is Nothing Then 'Load Picture if available
            ItemRow = FoundItem.Row
            'On Error Resume Next
            If Dir(Sheet2.Range("E" & ItemRow).Value, vbDirectory) <> "" Then
             With Pictures.Insert(Sheet2.Range("E" & ItemRow).Value)
                With .ShapeRange
                    .LockAspectRatio = msoTrue
                    .Height = 45
                    .Name = "ItemPic"
                End With
             End With
             With Shapes("ItemPic")
                .Left = Sheet1.Range("D6").Left
                .Top = Sheet1.Range("D6").Top
                .Visible = msoCTrue
             End With
            End If
            End If
        On Error GoTo 0
        Range("B4").Value = False
    End If
    
    ' Check if the selected cell is locked
    Dim LastItemRow As Long
    Dim cell As Range
    Dim isInReceiptRange As Boolean
    
    ' Determine the range of the receipt items
    With ThisWorkbook.Sheets("POS") ' Use the actual sheet name
        ' Find the last item row
        LastItemRow = .Range("K9999").End(xlUp).Row

        ' Check if the Target is within the receipt range
        isInReceiptRange = Not Intersect(Target, .Range("K10:N" & LastItemRow)) Is Nothing
    End With

    ' If the selected cell is not in the receipt range, check if it's locked
    If Not isInReceiptRange Then
        ' Check if the selected cell is locked
        If Target.Locked Then
            ' Prevent further actions in the event to avoid an infinite loop
            Application.EnableEvents = False
            ' Move the selection to the desired cell
            Me.Range("E10").Select
            ' Display a message to the user
            MsgBox "This cell is locked. Moving to cell E10."
            ' Re-enable events
            Application.EnableEvents = True
        End If
    End If
    
End Sub
